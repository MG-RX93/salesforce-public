//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JsonDebug {

	public class Left_percentage {
		public String heap_size_left {get;set;} 
		public String cpu_time_left {get;set;} 
		public String queries_left {get;set;} 

		public Left_percentage(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'heap_size_left') {
							heap_size_left = parser.getText();
						} else if (text == 'cpu_time_left') {
							cpu_time_left = parser.getText();
						} else if (text == 'queries_left') {
							queries_left = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Left_percentage consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class User {
		public String orgId {get;set;} 
		public String org_name {get;set;} 
		public String profileId {get;set;} 
		public String id {get;set;} 
		public String name {get;set;} 

		public User(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'orgId') {
							orgId = parser.getText();
						} else if (text == 'org_name') {
							org_name = parser.getText();
						} else if (text == 'profileId') {
							profileId = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'User consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Limits {
		public Left_percentage left_percentage {get;set;} 
		public Total total {get;set;} 
		public Used used {get;set;} 

		public Limits(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'left_percentage') {
							left_percentage = new Left_percentage(parser);
						} else if (text == 'total') {
							total = new Total(parser);
						} else if (text == 'used') {
							used = new Used(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Limits consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Used {
		public String heap_size_used {get;set;} 
		public String cpu_time_used {get;set;} 
		public String queries_used {get;set;} 

		public Used(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'heap_size_used') {
							heap_size_used = parser.getText();
						} else if (text == 'cpu_time_used') {
							cpu_time_used = parser.getText();
						} else if (text == 'queries_used') {
							queries_used = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Used consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Total {
		public String heap_size_total {get;set;} 
		public String cpu_time_total {get;set;} 
		public String queries_total {get;set;} // in json: tal.queries_total

		public Total(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'heap_size_total') {
							heap_size_total = parser.getText();
						} else if (text == 'cpu_time_total') {
							cpu_time_total = parser.getText();
						} else if (text == 'queries_total') {
							queries_total = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Total consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Transaction_info {
		public String is_CurrentContext_Trigger {get;set;} 
		public String transaction_quiddity {get;set;} // in json: transaction.quiddity
		public String requestId {get;set;} 
		public String timestamp {get;set;} 

		public Transaction_info(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'is_CurrentContext_Trigger') {
							is_CurrentContext_Trigger = parser.getText();
						} else if (text == 'transaction.transaction_quiddity') {
							transaction_quiddity = parser.getText();
						} else if (text == 'requestId') {
							requestId = parser.getText();
						} else if (text == 'timestamp') {
							timestamp = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Transaction_info consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Trigger_info {
		public String records_in_context {get;set;} 
		public String execution_context {get;set;} 
		public String method {get;set;} 
		public String class_name {get;set;} // in json: class
		public String object_name {get;set;} // in json: object

		public Trigger_info(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'records_in_context') {
							records_in_context = parser.getText();
						} else if (text == 'execution_context') {
							execution_context = parser.getText();
						} else if (text == 'method') {
							method = parser.getText();
						} else if (text == 'class') {
							class_name = parser.getText();
						} else if (text == 'object') {
							object_name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Trigger_info consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Transaction_info transaction_info {get;set;} 
	public User user {get;set;} 
	public Limits limits {get;set;} 
	public Trigger_info trigger_info {get;set;} 

	public JsonDebug(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'transaction_info') {
						transaction_info = new Transaction_info(parser);
					} else if (text == 'user') {
						user = new User(parser);
					} else if (text == 'limits') {
						limits = new Limits(parser);
					} else if (text == 'trigger_info') {
						trigger_info = new Trigger_info(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JsonDebug consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static JsonDebug parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JsonDebug(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	









}